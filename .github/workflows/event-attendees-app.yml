name: CI/CD (event-attendees-app)

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'database/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0
    env:
      BUILD_CONFIGURATION: Release

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false

      # ★ 追加: ビルド対象を自動検出（優先: *.sln → なければ *.csproj(Tests除く)）
      - name: Locate solution or projects
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          sln=$(ls -1 *.sln 2>/dev/null || true)
          if [ -z "$sln" ]; then
            sln=$(ls -1 src/*.sln 2>/dev/null || true)
          fi
          if [ -n "$sln" ]; then
            echo "mode=sln"     >> $GITHUB_OUTPUT
            echo "target=$sln"  >> $GITHUB_OUTPUT
            echo "Using solution: $sln"
            exit 0
          fi

          mapfile -t projects < <(find . -type f -name '*.csproj' ! -name '*.Tests.csproj' | sort)
          if [ ${#projects[@]} -eq 0 ]; then
            echo "No buildable *.csproj found (excluding *Tests.csproj)." >&2
            exit 1
          fi
          echo "mode=proj" >> $GITHUB_OUTPUT
          echo "target=$(printf "%s " "${projects[@]}")" >> $GITHUB_OUTPUT
          printf "Using projects:\n%s\n" "${projects[@]}"

      - name: Discover test projects
        id: discover
        shell: bash
        run: |
          set -euo pipefail
          TEST_PROJECTS_LIST=$(find . -type f -name '*.Tests.csproj' | sort || true)
          echo "Found test projects:"
          echo "$TEST_PROJECTS_LIST"
          echo "projects=$TEST_PROJECTS_LIST" >> $GITHUB_OUTPUT

      - name: Restore and Build
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ steps.locate.outputs.mode }}" = "sln" ]; then
            dotnet restore "${{ steps.locate.outputs.target }}"
            dotnet build   "${{ steps.locate.outputs.target }}" --no-restore --configuration "$BUILD_CONFIGURATION"
          else
            for p in ${{ steps.locate.outputs.target }}; do
              dotnet restore "$p"
              dotnet build   "$p" --no-restore --configuration "$BUILD_CONFIGURATION"
            done
          fi

      - name: Test with coverage
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p coverage test-results
          if [ -z "${{ steps.discover.outputs.projects }}" ]; then
            echo "No test projects found. Skipping tests."
            exit 0
          fi

          # 複数行の安全なループ
          while IFS= read -r proj; do
            [ -z "$proj" ] && continue
            echo "=== Testing $proj ==="
            NAME=$(basename "$proj" .csproj)

            dotnet test "$proj" \
              --no-build \
              --configuration "$BUILD_CONFIGURATION" \
              --collect:"XPlat Code Coverage" \
              --logger "trx;LogFileName=${NAME}-test-results.trx" || true

            RESULTS_DIR="$(dirname "$proj")/TestResults"
            COV_FILE=$(find "$RESULTS_DIR" -type f -name "coverage.cobertura.xml" | head -n 1 || true)
            [ -n "$COV_FILE" ] && cp "$COV_FILE" "coverage/${NAME}-coverage.cobertura.xml" || echo "No coverage for $proj"

            TRX_FILE=$(find "$RESULTS_DIR" -type f -name "*.trx" | head -n 1 || true)
            [ -n "$TRX_FILE" ] && cp "$TRX_FILE" "test-results/${NAME}-test-results.trx" || echo "No TRX for $proj"
          done <<< "${{ steps.discover.outputs.projects }}"

      - name: Upload test artifacts (coverage & trx)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          retention-days: 7
          path: |
            coverage/
            test-results/

  build_and_push_image:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    env:
      BUILD_CONFIGURATION: Release
      ACR_LOGIN_SERVER: cravanfr.azurecr.io
      IMAGE_NAME: eventattendeesapp
      IMAGE_TAG: latest
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-artifacts

      - name: Login to Azure Container Registry
        shell: bash
        run: |
          echo "${ACR_PASSWORD}" | docker login "${ACR_LOGIN_SERVER}" --username "${ACR_USERNAME}" --password-stdin

      - name: Build container image
        shell: bash
        run: |
          docker build \
            -t "${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}" \
            -f src/Dockerfile ./src

      - name: Push container image
        shell: bash
        run: docker push "${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}"
